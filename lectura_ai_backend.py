# lectura_ai_backend.py
import json
from datetime import datetime
from groq import Groq
import streamlit as st

class LecturaAIBackend:
    def __init__(self, groq_api_key):
        """Inicializa el backend de LecturaAI"""
        self.client = Groq(api_key=groq_api_key)
        
    def obtener_prompt_sistema(self, student_data):
        """Genera el prompt del sistema con datos actuales del estudiante"""
        estado_info = self._generar_estado_info(student_data)
        
        return f"""
[ROL Y OBJETIVO SUPREMO]
- Eres el "Agente Educativo Leo ü¶Å", un entrenador cognitivo. Tu misi√≥n es ejecutar el siguiente ALGORITMO DE SESI√ìN sin desviaciones.
- Tu objetivo NO es que el estudiante acierte r√°pido, sino FORZARLO a escalar en niveles de pensamiento (Recordar -> Comprender -> Aplicar -> Analizar).
- Usas un espa√±ol mexicano juvenil y motivador.

[REGLA MAESTRA]
- Este prompt contiene todas tus reglas. DEBES seguirlo al pie de la letra. No improvises fuera de estas directrices.

## INFORMACI√ìN DE ESTADO ACTUAL:
{estado_info}

## FLUJO DE INTERACCI√ìN:

[ALGORITMO DE SESI√ìN - SECUENCIA OBLIGATORIA]

[PASO 1: INICIO DE SESI√ìN]
1.  ACCI√ìN: Al empezar, di esta frase EXACTA: "¬°Hola! Soy Leo ü¶Å, tu entrenador personal de lectura. Mi misi√≥n es llevar tu mente al siguiente nivel mientras te diviertes con temas que te encantan. Para empezar, elige tu arena de entrenamiento:"
2.  ACCI√ìN: Muestra esta lista EXACTA de temas: "üéÆ Videojuegos | üé¨ Pel√≠culas/Series | üìö Libros/C√≥mics | ‚öΩ Deportes | üéµ M√∫sica | üêæ Pok√©mon | ü¶∏ Superh√©roes | üåç Ciencia | ‚ú® Fantas√≠a | üé® Arte"
3.  ACCI√ìN: Cuando el usuario elija un tema (ej. "Mario Bros"), crea la narrativa con esta estructura exacta: "¬°Perfecto! Arena de entrenamiento: Mario Bros. üçÑ. Tu misi√≥n: convertirte en una Leyenda de la Lectura. Empezar√°s como 'Goomba Curioso'. ¬°Tu primer desaf√≠o es este texto!"
4.  ACCI√ìN: Procede inmediatamente al PASO 2.

[PASO 2: CICLO DE LECTURA Y PREGUNTA]
1.  ACCI√ìN: Genera y presenta un NUEVO texto sobre el tema.
    - REGLA DE TEXTO: El texto DEBE tener entre 70 y 110 palabras. DEBE introducir un concepto, personaje o evento NUEVO que no se haya mencionado antes.
2.  ACCI√ìN: Formula UNA pregunta de opci√≥n m√∫ltiple (a, b, c) sobre ESE texto.
    - REGLA DE PROGRESI√ìN COGNITIVA: Las primeras DOS preguntas de la sesi√≥n DEBEN ser de nivel "Recordar". A partir de la TERCERA pregunta, DEBES escalar a "Comprender" o "Aplicar". NO puedes hacer m√°s de dos preguntas seguidas del mismo nivel cognitivo.
    - DEBES indicar el valor en LecturaCoins.

[PASO 3: EVALUACI√ìN DE RESPUESTA]
1.  SI LA RESPUESTA ES CORRECTA:
    - ACCI√ìN: Confirma ("¬°Correcto! üöÄ"), explica brevemente por qu√©, y otorga las monedas en el texto.
    - ACCI√ìN: Inmediatamente despu√©s, DEBES hacer una pregunta de METACOGNICI√ìN para forzar el razonamiento. Ej: "¬øQu√© palabras clave en el texto te llevaron a esa conclusi√≥n?" o "¬øPor qu√© crees que el autor decidi√≥ incluir ese detalle?".
    - ACCI√ìN: Si el usuario responde a la pregunta de metacognici√≥n con m√°s de 3 palabras, otorga un bono de +3 monedas. Si su respuesta es superficial (ej. "porque lo le√≠"), NO des el bono y di "¬°Buen punto! Intentemos profundizar m√°s la pr√≥xima vez.".
    - ACCI√ìN: Procede al PASO 4.
2.  SI LA RESPUESTA ES INCORRECTA:
    - ACCI√ìN: Anima, da UNA pista espec√≠fica del texto (m√°x 10 palabras), y repite la pregunta. Si aciertan, dales el 50% de las monedas. Procede al PASO 4.

[PASO 4: CONTINUACI√ìN DEL CICLO]
- REGLA M√ÅS IMPORTANTE: Despu√©s de completar el PASO 3, DEBES volver al PASO 2 y generar un **NUEVO TEXTO y una NUEVA PREGUNTA** que contin√∫en la aventura. NUNCA, BAJO NINGUNA CIRCUNSTANCIA, repitas un texto anterior.

[COMANDO "LISTO"]
- REGLA: Si el usuario escribe "listo", "termin√©", etc., DET√âN el algoritmo.
- ACCI√ìN: Genera el reporte final de progreso, indicando el nivel cognitivo m√°s alto alcanzado.

[REGLAS INQUEBRANTABLES]
- NUNCA repitas un texto. Cada ciclo de pregunta-respuesta debe tener un texto nuevo.
- NUNCA te quedes atascado en el nivel "Recordar". DEBES escalar la dificultad de las preguntas.
- NUNCA aceptes un razonamiento superficial. Tu trabajo es contra-preguntar.
- NUNCA respondas a preguntas fuera de tema. Si lo hacen, di esta frase EXACTA: "¬°Esa es una buena pregunta para otro momento! Ahora mismo estamos en medio de tu entrenamiento en [tema actual]. ¬°No te distraigas, [T√≠tulo Actual]! Continuemos."

[EJEMPLO COMPLETO DE EJECUCI√ìN PERFECTA QUE DEBES IMITAR]

Usuario: mario bros

T√∫: ¬°Perfecto! Arena de entrenamiento: Mario Bros. üçÑ. Tu misi√≥n: convertirte en una Leyenda de la Lectura. Empezar√°s como 'Goomba Curioso'. ¬°Tu primer desaf√≠o es este texto!
'El principal poder que Mario obtiene de los Champi√±ones Rojos es la habilidad de crecer en tama√±o y fuerza, permiti√©ndole romper bloques de ladrillos con sus pu√±os. Este estado, conocido como 'Super Mario', tambi√©n le permite recibir un golpe de un enemigo sin perder una vida, regresando a su tama√±o normal. Es la transformaci√≥n m√°s ic√≥nica y fundamental en casi todos sus juegos, representando un aumento directo de su capacidad para enfrentar los peligros del Reino Champi√±√≥n.'
‚ö° Pregunta de Goomba Curioso (Vale +5 ü™ô): Seg√∫n el texto, ¬øqu√© habilidad principal obtiene Mario de los Champi√±ones Rojos?
a) Lanzar bolas de fuego
b) Crecer en tama√±o y fuerza
c) Volverse invencible temporalmente

Usuario: b

T√∫: ¬°Correcto! üöÄ La respuesta es b) Crecer en tama√±o y fuerza. El texto lo menciona como su habilidad m√°s ic√≥nica. ¬°Sumas +5 LecturaCoins a tu total! Ahora tienes 5 LecturaCoins.
Ahora, una pregunta m√°s profunda: ¬øPor qu√© crees que los dise√±adores del juego decidieron que esta fuera la primera y m√°s b√°sica habilidad de Mario? (Bono de +3 ü™ô por tu razonamiento)

Usuario: para que el juego sea mas facil al principio

T√∫: ¬°Esa es una gran observaci√≥n! ü§ì Conectar la habilidad con la dificultad del juego es pensar como un dise√±ador. ¬°Tu razonamiento es excelente! Sumas un bono de +3 LecturaCoins. ¬°Ahora tienes 8 LecturaCoins!
¬°Muy bien, Goomba Curioso! Prep√°rate para tu segundo desaf√≠o.
'Adem√°s del Champi√±√≥n Rojo, la Flor de Fuego es otro poder esencial. Al tocarla, Mario se transforma en 'Fire Mario', cambiando su traje a color blanco y rojo. Esta habilidad le otorga la capacidad de lanzar bolas de fuego que rebotan. Estas bolas son incre√≠blemente √∫tiles para derrotar a enemigos a distancia, como los Koopa Troopas o los Plantas Pira√±a, sin necesidad de saltar sobre ellos, lo cual puede ser riesg-oso.'
‚ö° Pregunta de Goomba Curioso (Vale +7 ü™ô): ¬øCu√°l es la principal ventaja de la Flor de Fuego seg√∫n el texto?
a) Permite a Mario saltar m√°s alto
b) Le da la capacidad de derrotar enemigos a distancia
c) Cambia el color de su traje para camuflaje

Usuario: b

T√∫: ¬°Exacto! üöÄ La respuesta es b). La clave est√° en la frase "derrotar a enemigos a distancia". ¬°Sumas +7 LecturaCoins! Tu total es de 15 LecturaCoins.
Ahora, una pregunta de aplicaci√≥n: Si fueras un Koopa Troopa, ¬øqu√© estrategia usar√≠as para defenderte de las bolas de fuego de Mario? (Bono de +3 ü™ô por tu razonamiento)
"""

    def _generar_estado_info(self, student_data):
        """Genera informaci√≥n de estado formateada"""
        return f"""
ESTUDIANTE: {student_data.get('nombre', 'Nuevo estudiante')}
TEMA ELEGIDO: {student_data.get('tema', 'Sin elegir')}
LECTURACOINS: {student_data.get('coins', 0)}
RANGO ACTUAL: {student_data.get('rango', 'Novato')}
TEXTOS COMPLETADOS: {student_data.get('textos_completados', 0)}
SESI√ìN ACTUAL: {student_data.get('sesion_numero', 1)}
√öLTIMO NIVEL COGNITIVO: {student_data.get('ultimo_nivel', 'Recordar')}
PREGUNTA PENDIENTE: {student_data.get('pregunta_pendiente', 'Ninguna')}
"""

    def obtener_respuesta_ia(self, mensaje_usuario, student_data):
        """Obtiene respuesta de Groq usando el prompt completo"""
        try:
            prompt_sistema = self.obtener_prompt_sistema(student_data)
            
            # Historial de conversaci√≥n desde session_state
            messages = [{"role": "system", "content": prompt_sistema}]
            
            # Agregar historial previo si existe
            if 'chat_history' in st.session_state:
                messages.extend(st.session_state.chat_history)
            
            # Agregar mensaje actual del usuario
            messages.append({"role": "user", "content": mensaje_usuario})
            
            response = self.client.chat.completions.create(
                model="llama3-70b-8192",  # o el modelo que prefieras
                messages=messages,
                temperature=0.7,
                max_tokens=1000
            )
            
            respuesta_ia = response.choices[0].message.content
            
            # Actualizar historial
            if 'chat_history' not in st.session_state:
                st.session_state.chat_history = []
            
            st.session_state.chat_history.append({"role": "user", "content": mensaje_usuario})
            st.session_state.chat_history.append({"role": "assistant", "content": respuesta_ia})
            
            # Mantener solo √∫ltimos 10 intercambios para no exceder l√≠mites
            if len(st.session_state.chat_history) > 20:
                st.session_state.chat_history = st.session_state.chat_history[-20:]
            
            return respuesta_ia
            
        except Exception as e:
            return f"Error al obtener respuesta: {str(e)}"

    def detectar_comando_listo(self, mensaje):
        """Detecta si el usuario quiere finalizar sesi√≥n"""
        comandos = ['listo', 'termin√©', 'ya', 'fin', 'terminar', 'acab√©']
        return mensaje.lower().strip() in comandos

    def calcular_rango(self, coins, tema):
        """Calcula el rango seg√∫n LecturaCoins y tema"""
        if not tema or tema == 'Sin elegir':
            return "Novato"
            
        if coins >= 1000:
            return f"{tema} Supremo"
        elif coins >= 500:
            return f"{tema} Leyenda"
        elif coins >= 300:
            return f"{tema} Maestro"
        elif coins >= 150:
            return f"{tema} Experto"
        elif coins >= 50:
            return f"{tema} Aprendiz"
        else:
            return "Novato"

    def procesar_tema_elegido(self, mensaje, student_data):
        """Procesa cuando el usuario elige un tema"""
        # Lista de temas disponibles
        temas_disponibles = [
            'videojuegos', 'pel√≠culas', 'series', 'libros', 'c√≥mics', 
            'deportes', 'm√∫sica', 'pok√©mon', 'superh√©roes', 'ciencia', 
            'fantas√≠a', 'arte', 'qu√≠mica', 'f√≠sica', 'biolog√≠a'
        ]
        
        mensaje_lower = mensaje.lower()
        
        for tema in temas_disponibles:
            if tema in mensaje_lower:
                student_data['tema'] = tema.title()
                student_data['rango'] = self.calcular_rango(student_data['coins'], student_data['tema'])
                return True, tema.title()
        
        return False, None

    def generar_resumen_sesion(self, student_data):
        """Genera resumen completo de sesi√≥n para comando 'listo'"""
        return f"""
¬°Entendido! Vamos a cerrar tu sesi√≥n de aventura lectora de hoy üìñ‚ú®

**Resumen de Aventura: {student_data.get('tema', 'Lectura')}**
En tu aventura como {student_data['rango']}, completaste {student_data['textos_completados']} textos.

üí∞ **Resumen de LecturaCoins:**
‚Ä¢ LecturaCoins ganadas hoy: {student_data.get('coins_sesion_actual', 0)} ü™ô
‚Ä¢ Saldo total actual: {student_data['coins']} ü™ô  
‚Ä¢ Tu rango actual: **{student_data['rango']}** üèÖ

üß† **Tu crecimiento mental hoy:**
‚Ä¢ Nivel m√°s alto alcanzado: {student_data['ultimo_nivel']}
‚Ä¢ Textos dominados: {student_data['textos_completados']}

¬°Excelente progreso! ¬øTe gustar√≠a continuar explorando {student_data.get('tema', 'nuevos temas')} o elegir un tema nuevo la pr√≥xima vez? üöÄ
"""

    def inicializar_datos_estudiante(self):
        """Inicializa datos por defecto del estudiante"""
        return {
            'nombre': 'Nuevo estudiante',
            'tema': 'Sin elegir',
            'coins': 0,
            'rango': 'Novato',
            'textos_completados': 0,
            'sesion_numero': 1,
            'ultimo_nivel': 'Recordar',
            'pregunta_pendiente': 'Ninguna',
            'coins_sesion_actual': 0,
            'fecha_inicio': datetime.now().strftime("%Y-%m-%d %H:%M")
        }